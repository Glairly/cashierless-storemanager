/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BBoxType } from './BBoxType';
import {
    BBoxTypeFromJSON,
    BBoxTypeFromJSONTyped,
    BBoxTypeToJSON,
} from './BBoxType';

/**
 * 
 * @export
 * @interface DetectionResult
 */
export interface DetectionResult {
    /**
     * 
     * @type {Array<any>}
     * @memberof DetectionResult
     */
    labels: Array<any>;
    /**
     * 
     * @type {Array<any>}
     * @memberof DetectionResult
     */
    bboxes: Array<any>;
    /**
     * 
     * @type {BBoxType}
     * @memberof DetectionResult
     */
    type?: BBoxType;
}

/**
 * Check if a given object implements the DetectionResult interface.
 */
export function instanceOfDetectionResult(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "labels" in value;
    isInstance = isInstance && "bboxes" in value;

    return isInstance;
}

export function DetectionResultFromJSON(json: any): DetectionResult {
    return DetectionResultFromJSONTyped(json, false);
}

export function DetectionResultFromJSONTyped(json: any, ignoreDiscriminator: boolean): DetectionResult {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'labels': json['labels'],
        'bboxes': json['bboxes'],
        'type': !exists(json, 'type') ? undefined : BBoxTypeFromJSON(json['type']),
    };
}

export function DetectionResultToJSON(value?: DetectionResult | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'labels': value.labels,
        'bboxes': value.bboxes,
        'type': BBoxTypeToJSON(value.type),
    };
}

