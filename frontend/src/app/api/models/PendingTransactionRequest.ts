/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PendingTransactionRequest
 */
export interface PendingTransactionRequest {
    /**
     * 
     * @type {string}
     * @memberof PendingTransactionRequest
     */
    payeeId: string;
    /**
     * 
     * @type {string}
     * @memberof PendingTransactionRequest
     */
    payeeAccountNumber: string;
    /**
     * 
     * @type {string}
     * @memberof PendingTransactionRequest
     */
    payerId: string;
    /**
     * 
     * @type {string}
     * @memberof PendingTransactionRequest
     */
    payerAccountNumber: string;
    /**
     * 
     * @type {number}
     * @memberof PendingTransactionRequest
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof PendingTransactionRequest
     */
    transactionId: string;
    /**
     * 
     * @type {string}
     * @memberof PendingTransactionRequest
     */
    transactionDateandTime: string;
    /**
     * 
     * @type {string}
     * @memberof PendingTransactionRequest
     */
    currencyCode?: string;
    /**
     * 
     * @type {string}
     * @memberof PendingTransactionRequest
     */
    status: string;
}

/**
 * Check if a given object implements the PendingTransactionRequest interface.
 */
export function instanceOfPendingTransactionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "payeeId" in value;
    isInstance = isInstance && "payeeAccountNumber" in value;
    isInstance = isInstance && "payerId" in value;
    isInstance = isInstance && "payerAccountNumber" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "transactionId" in value;
    isInstance = isInstance && "transactionDateandTime" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function PendingTransactionRequestFromJSON(json: any): PendingTransactionRequest {
    return PendingTransactionRequestFromJSONTyped(json, false);
}

export function PendingTransactionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PendingTransactionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'payeeId': json['payeeId'],
        'payeeAccountNumber': json['payeeAccountNumber'],
        'payerId': json['payerId'],
        'payerAccountNumber': json['payerAccountNumber'],
        'amount': json['amount'],
        'transactionId': json['transactionId'],
        'transactionDateandTime': json['transactionDateandTime'],
        'currencyCode': !exists(json, 'currencyCode') ? undefined : json['currencyCode'],
        'status': json['status'],
    };
}

export function PendingTransactionRequestToJSON(value?: PendingTransactionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'payeeId': value.payeeId,
        'payeeAccountNumber': value.payeeAccountNumber,
        'payerId': value.payerId,
        'payerAccountNumber': value.payerAccountNumber,
        'amount': value.amount,
        'transactionId': value.transactionId,
        'transactionDateandTime': value.transactionDateandTime,
        'currencyCode': value.currencyCode,
        'status': value.status,
    };
}

