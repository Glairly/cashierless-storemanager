/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TransactionItemRequest } from './TransactionItemRequest';
import {
    TransactionItemRequestFromJSON,
    TransactionItemRequestFromJSONTyped,
    TransactionItemRequestToJSON,
} from './TransactionItemRequest';

/**
 * 
 * @export
 * @interface TransactionRequest
 */
export interface TransactionRequest {
    /**
     * 
     * @type {number}
     * @memberof TransactionRequest
     */
    shopId: number;
    /**
     * 
     * @type {Array<TransactionItemRequest>}
     * @memberof TransactionRequest
     */
    items: Array<TransactionItemRequest>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TransactionRequest
     */
    barcodes: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof TransactionRequest
     */
    clientId: number;
}

/**
 * Check if a given object implements the TransactionRequest interface.
 */
export function instanceOfTransactionRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "shopId" in value;
    isInstance = isInstance && "items" in value;
    isInstance = isInstance && "barcodes" in value;
    isInstance = isInstance && "clientId" in value;

    return isInstance;
}

export function TransactionRequestFromJSON(json: any): TransactionRequest {
    return TransactionRequestFromJSONTyped(json, false);
}

export function TransactionRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shopId': json['shop_id'],
        'items': ((json['items'] as Array<any>).map(TransactionItemRequestFromJSON)),
        'barcodes': json['barcodes'],
        'clientId': json['client_id'],
    };
}

export function TransactionRequestToJSON(value?: TransactionRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shop_id': value.shopId,
        'items': ((value.items as Array<any>).map(TransactionItemRequestToJSON)),
        'barcodes': value.barcodes,
        'client_id': value.clientId,
    };
}

