/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddBarcodeRequest,
  AddItemRequest,
  AddItemTypeRequest,
  AnonymousTransactionRequest,
  DecodeResult,
  DeductDepositRequest,
  DetectionResult,
  EditAuthRequest,
  EditClientRequest,
  HTTPValidationError,
  InferenceRequest,
  InferenceResult,
  PendingTopupTransactionRequest,
  PendingTransactionRequest,
  SendFileRequest,
  ShopCreateRequest,
  SignUpRequest,
  SignUpWithShopRequest,
  TransactionRequest,
  TransactionTopupRequest,
} from '../models';
import {
    AddBarcodeRequestFromJSON,
    AddBarcodeRequestToJSON,
    AddItemRequestFromJSON,
    AddItemRequestToJSON,
    AddItemTypeRequestFromJSON,
    AddItemTypeRequestToJSON,
    AnonymousTransactionRequestFromJSON,
    AnonymousTransactionRequestToJSON,
    DecodeResultFromJSON,
    DecodeResultToJSON,
    DeductDepositRequestFromJSON,
    DeductDepositRequestToJSON,
    DetectionResultFromJSON,
    DetectionResultToJSON,
    EditAuthRequestFromJSON,
    EditAuthRequestToJSON,
    EditClientRequestFromJSON,
    EditClientRequestToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    InferenceRequestFromJSON,
    InferenceRequestToJSON,
    InferenceResultFromJSON,
    InferenceResultToJSON,
    PendingTopupTransactionRequestFromJSON,
    PendingTopupTransactionRequestToJSON,
    PendingTransactionRequestFromJSON,
    PendingTransactionRequestToJSON,
    SendFileRequestFromJSON,
    SendFileRequestToJSON,
    ShopCreateRequestFromJSON,
    ShopCreateRequestToJSON,
    SignUpRequestFromJSON,
    SignUpRequestToJSON,
    SignUpWithShopRequestFromJSON,
    SignUpWithShopRequestToJSON,
    TransactionRequestFromJSON,
    TransactionRequestToJSON,
    TransactionTopupRequestFromJSON,
    TransactionTopupRequestToJSON,
} from '../models';

export interface AddBarcodeToItemSmapiV1AddBarcodeToItemPostRequest {
    addBarcodeRequest: AddBarcodeRequest;
}

export interface AddItemToShopSmapiV1AddItemToShopPostRequest {
    addItemRequest: AddItemRequest;
}

export interface AddItemTypeSmapiV1AddItemTypePostRequest {
    addItemTypeRequest: AddItemTypeRequest;
}

export interface ClientDeductFapiV1ClientDeductPutRequest {
    deductDepositRequest: DeductDepositRequest;
}

export interface ClientDepositFapiV1ClientDepositPutRequest {
    deductDepositRequest: DeductDepositRequest;
}

export interface CreateShopByClientIdCapiV1CreateShopByClientIdPostRequest {
    shopCreateRequest: ShopCreateRequest;
}

export interface DecodeBarcodesImapiV1DecodePostRequest {
    file: Blob;
}

export interface DoAnonymousTransactionFapiV1DoAnonymousTransactionPostRequest {
    anonymousTransactionRequest: AnonymousTransactionRequest;
}

export interface DoTransactionFapiV1DoTransactionPostRequest {
    transactionRequest: TransactionRequest;
}

export interface EditClientCapiV1EditClientPostRequest {
    editClientRequest: EditClientRequest;
}

export interface EditUserCapiV1EditUserPostRequest {
    editAuthRequest: EditAuthRequest;
}

export interface GeneratePromptpayQrFapiV1GeneratePromptpayQrPostRequest {
    transactionRequest: TransactionRequest;
}

export interface GeneratePromptpayQrTopupFapiV1GeneratePromptpayQrTopupPostRequest {
    transactionTopupRequest: TransactionTopupRequest;
}

export interface GetClientByIdCapiV1GetClientByIdGetRequest {
    id: number;
}

export interface GetClientTransactionsFapiV1GetClientTransactionsGetRequest {
    clientId: number;
}

export interface GetItemByBarcodeSmapiV1GetItemByBarcodeGetRequest {
    barcode: string;
}

export interface GetItemWithBarcodesSmapiV1GetItemWithBarcodesGetRequest {
    itemId: number;
}

export interface GetPendingTopupTransactionFapiV1GetPendingTopupTransactionGetRequest {
    pendingTopupTransactionId: number;
}

export interface GetPendingTransactionFapiV1GetPendingTransactionGetRequest {
    pendingTransactionId: number;
}

export interface GetShopByClientIdCapiV1GetShopByClientIdGetRequest {
    clientId: string;
}

export interface InferenceImapiV1InferencePostRequest {
    inferenceRequest: InferenceRequest;
}

export interface LoginCapiV1LoginPostRequest {
    username: string;
    password: string;
    grantType?: string;
    scope?: string;
    clientId?: string;
    clientSecret?: string;
}

export interface LoginWithFaceCapiV1LoginWithFacePostRequest {
    sendFileRequest: SendFileRequest;
}

export interface PaymentConfirmFapiV1PaymentConfirmPostRequest {
    pendingTransactionRequest: PendingTransactionRequest;
}

export interface PredictImapiV1PredictPostRequest {
    file: Blob;
}

export interface ShopDeductFapiV1ShopDeductPutRequest {
    deductDepositRequest: DeductDepositRequest;
}

export interface ShopDepositFapiV1ShopDepositPutRequest {
    deductDepositRequest: DeductDepositRequest;
}

export interface SignupCapiV1SignupPostRequest {
    signUpRequest: SignUpRequest;
}

export interface SignupWithShopCapiV1SignupWithShopPostRequest {
    signUpWithShopRequest: SignUpWithShopRequest;
}

export interface TopupConfirmFapiV1TopupConfirmPostRequest {
    pendingTopupTransactionRequest: PendingTopupTransactionRequest;
}

export interface TopupFapiV1TopupPostRequest {
    transactionTopupRequest: TransactionTopupRequest;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Add Barcode To Item
     */
    async addBarcodeToItemSmapiV1AddBarcodeToItemPostRaw(requestParameters: AddBarcodeToItemSmapiV1AddBarcodeToItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.addBarcodeRequest === null || requestParameters.addBarcodeRequest === undefined) {
            throw new runtime.RequiredError('addBarcodeRequest','Required parameter requestParameters.addBarcodeRequest was null or undefined when calling addBarcodeToItemSmapiV1AddBarcodeToItemPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/smapi/v1/add_barcode_to_item`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddBarcodeRequestToJSON(requestParameters.addBarcodeRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add Barcode To Item
     */
    async addBarcodeToItemSmapiV1AddBarcodeToItemPost(requestParameters: AddBarcodeToItemSmapiV1AddBarcodeToItemPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.addBarcodeToItemSmapiV1AddBarcodeToItemPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Item To Shop
     */
    async addItemToShopSmapiV1AddItemToShopPostRaw(requestParameters: AddItemToShopSmapiV1AddItemToShopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.addItemRequest === null || requestParameters.addItemRequest === undefined) {
            throw new runtime.RequiredError('addItemRequest','Required parameter requestParameters.addItemRequest was null or undefined when calling addItemToShopSmapiV1AddItemToShopPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/smapi/v1/add_item_to_shop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddItemRequestToJSON(requestParameters.addItemRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add Item To Shop
     */
    async addItemToShopSmapiV1AddItemToShopPost(requestParameters: AddItemToShopSmapiV1AddItemToShopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.addItemToShopSmapiV1AddItemToShopPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Add Item Type
     */
    async addItemTypeSmapiV1AddItemTypePostRaw(requestParameters: AddItemTypeSmapiV1AddItemTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.addItemTypeRequest === null || requestParameters.addItemTypeRequest === undefined) {
            throw new runtime.RequiredError('addItemTypeRequest','Required parameter requestParameters.addItemTypeRequest was null or undefined when calling addItemTypeSmapiV1AddItemTypePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/smapi/v1/add_item_type`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddItemTypeRequestToJSON(requestParameters.addItemTypeRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Add Item Type
     */
    async addItemTypeSmapiV1AddItemTypePost(requestParameters: AddItemTypeSmapiV1AddItemTypePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.addItemTypeSmapiV1AddItemTypePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Client Deduct
     */
    async clientDeductFapiV1ClientDeductPutRaw(requestParameters: ClientDeductFapiV1ClientDeductPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.deductDepositRequest === null || requestParameters.deductDepositRequest === undefined) {
            throw new runtime.RequiredError('deductDepositRequest','Required parameter requestParameters.deductDepositRequest was null or undefined when calling clientDeductFapiV1ClientDeductPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/client_deduct`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeductDepositRequestToJSON(requestParameters.deductDepositRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Client Deduct
     */
    async clientDeductFapiV1ClientDeductPut(requestParameters: ClientDeductFapiV1ClientDeductPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.clientDeductFapiV1ClientDeductPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Client Deposit
     */
    async clientDepositFapiV1ClientDepositPutRaw(requestParameters: ClientDepositFapiV1ClientDepositPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.deductDepositRequest === null || requestParameters.deductDepositRequest === undefined) {
            throw new runtime.RequiredError('deductDepositRequest','Required parameter requestParameters.deductDepositRequest was null or undefined when calling clientDepositFapiV1ClientDepositPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/client_deposit`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeductDepositRequestToJSON(requestParameters.deductDepositRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Client Deposit
     */
    async clientDepositFapiV1ClientDepositPut(requestParameters: ClientDepositFapiV1ClientDepositPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.clientDepositFapiV1ClientDepositPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Shop By Client Id
     */
    async createShopByClientIdCapiV1CreateShopByClientIdPostRaw(requestParameters: CreateShopByClientIdCapiV1CreateShopByClientIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.shopCreateRequest === null || requestParameters.shopCreateRequest === undefined) {
            throw new runtime.RequiredError('shopCreateRequest','Required parameter requestParameters.shopCreateRequest was null or undefined when calling createShopByClientIdCapiV1CreateShopByClientIdPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/capi/v1/create_shop_by_client_id`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ShopCreateRequestToJSON(requestParameters.shopCreateRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create Shop By Client Id
     */
    async createShopByClientIdCapiV1CreateShopByClientIdPost(requestParameters: CreateShopByClientIdCapiV1CreateShopByClientIdPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.createShopByClientIdCapiV1CreateShopByClientIdPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Decode Barcodes
     */
    async decodeBarcodesImapiV1DecodePostRaw(requestParameters: DecodeBarcodesImapiV1DecodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DecodeResult>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling decodeBarcodesImapiV1DecodePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/imapi/v1/decode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DecodeResultFromJSON(jsonValue));
    }

    /**
     * Decode Barcodes
     */
    async decodeBarcodesImapiV1DecodePost(requestParameters: DecodeBarcodesImapiV1DecodePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DecodeResult> {
        const response = await this.decodeBarcodesImapiV1DecodePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Do Anonymous Transaction
     */
    async doAnonymousTransactionFapiV1DoAnonymousTransactionPostRaw(requestParameters: DoAnonymousTransactionFapiV1DoAnonymousTransactionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.anonymousTransactionRequest === null || requestParameters.anonymousTransactionRequest === undefined) {
            throw new runtime.RequiredError('anonymousTransactionRequest','Required parameter requestParameters.anonymousTransactionRequest was null or undefined when calling doAnonymousTransactionFapiV1DoAnonymousTransactionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/do_anonymous_transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AnonymousTransactionRequestToJSON(requestParameters.anonymousTransactionRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Do Anonymous Transaction
     */
    async doAnonymousTransactionFapiV1DoAnonymousTransactionPost(requestParameters: DoAnonymousTransactionFapiV1DoAnonymousTransactionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.doAnonymousTransactionFapiV1DoAnonymousTransactionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Do Transaction
     */
    async doTransactionFapiV1DoTransactionPostRaw(requestParameters: DoTransactionFapiV1DoTransactionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.transactionRequest === null || requestParameters.transactionRequest === undefined) {
            throw new runtime.RequiredError('transactionRequest','Required parameter requestParameters.transactionRequest was null or undefined when calling doTransactionFapiV1DoTransactionPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/do_transaction`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionRequestToJSON(requestParameters.transactionRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Do Transaction
     */
    async doTransactionFapiV1DoTransactionPost(requestParameters: DoTransactionFapiV1DoTransactionPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.doTransactionFapiV1DoTransactionPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit Client
     */
    async editClientCapiV1EditClientPostRaw(requestParameters: EditClientCapiV1EditClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.editClientRequest === null || requestParameters.editClientRequest === undefined) {
            throw new runtime.RequiredError('editClientRequest','Required parameter requestParameters.editClientRequest was null or undefined when calling editClientCapiV1EditClientPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/capi/v1/edit_client`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditClientRequestToJSON(requestParameters.editClientRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Edit Client
     */
    async editClientCapiV1EditClientPost(requestParameters: EditClientCapiV1EditClientPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.editClientCapiV1EditClientPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Edit User
     */
    async editUserCapiV1EditUserPostRaw(requestParameters: EditUserCapiV1EditUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.editAuthRequest === null || requestParameters.editAuthRequest === undefined) {
            throw new runtime.RequiredError('editAuthRequest','Required parameter requestParameters.editAuthRequest was null or undefined when calling editUserCapiV1EditUserPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/capi/v1/edit_user`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EditAuthRequestToJSON(requestParameters.editAuthRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Edit User
     */
    async editUserCapiV1EditUserPost(requestParameters: EditUserCapiV1EditUserPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.editUserCapiV1EditUserPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate Promptpay Qr
     */
    async generatePromptpayQrFapiV1GeneratePromptpayQrPostRaw(requestParameters: GeneratePromptpayQrFapiV1GeneratePromptpayQrPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.transactionRequest === null || requestParameters.transactionRequest === undefined) {
            throw new runtime.RequiredError('transactionRequest','Required parameter requestParameters.transactionRequest was null or undefined when calling generatePromptpayQrFapiV1GeneratePromptpayQrPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/generate_promptpay_qr`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionRequestToJSON(requestParameters.transactionRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Generate Promptpay Qr
     */
    async generatePromptpayQrFapiV1GeneratePromptpayQrPost(requestParameters: GeneratePromptpayQrFapiV1GeneratePromptpayQrPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.generatePromptpayQrFapiV1GeneratePromptpayQrPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Generate Promptpay Qr Topup
     */
    async generatePromptpayQrTopupFapiV1GeneratePromptpayQrTopupPostRaw(requestParameters: GeneratePromptpayQrTopupFapiV1GeneratePromptpayQrTopupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.transactionTopupRequest === null || requestParameters.transactionTopupRequest === undefined) {
            throw new runtime.RequiredError('transactionTopupRequest','Required parameter requestParameters.transactionTopupRequest was null or undefined when calling generatePromptpayQrTopupFapiV1GeneratePromptpayQrTopupPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/generate_promptpay_qr_topup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionTopupRequestToJSON(requestParameters.transactionTopupRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Generate Promptpay Qr Topup
     */
    async generatePromptpayQrTopupFapiV1GeneratePromptpayQrTopupPost(requestParameters: GeneratePromptpayQrTopupFapiV1GeneratePromptpayQrTopupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.generatePromptpayQrTopupFapiV1GeneratePromptpayQrTopupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Client By Id
     */
    async getClientByIdCapiV1GetClientByIdGetRaw(requestParameters: GetClientByIdCapiV1GetClientByIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getClientByIdCapiV1GetClientByIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.id !== undefined) {
            queryParameters['id'] = requestParameters.id;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/capi/v1/get_client_by_id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Client By Id
     */
    async getClientByIdCapiV1GetClientByIdGet(requestParameters: GetClientByIdCapiV1GetClientByIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getClientByIdCapiV1GetClientByIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Client Transactions
     */
    async getClientTransactionsFapiV1GetClientTransactionsGetRaw(requestParameters: GetClientTransactionsFapiV1GetClientTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling getClientTransactionsFapiV1GetClientTransactionsGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fapi/v1/get_client_transactions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Client Transactions
     */
    async getClientTransactionsFapiV1GetClientTransactionsGet(requestParameters: GetClientTransactionsFapiV1GetClientTransactionsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getClientTransactionsFapiV1GetClientTransactionsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Item By Barcode
     */
    async getItemByBarcodeSmapiV1GetItemByBarcodeGetRaw(requestParameters: GetItemByBarcodeSmapiV1GetItemByBarcodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.barcode === null || requestParameters.barcode === undefined) {
            throw new runtime.RequiredError('barcode','Required parameter requestParameters.barcode was null or undefined when calling getItemByBarcodeSmapiV1GetItemByBarcodeGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.barcode !== undefined) {
            queryParameters['barcode'] = requestParameters.barcode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/smapi/v1/get_item_by_barcode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Item By Barcode
     */
    async getItemByBarcodeSmapiV1GetItemByBarcodeGet(requestParameters: GetItemByBarcodeSmapiV1GetItemByBarcodeGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getItemByBarcodeSmapiV1GetItemByBarcodeGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Item With Barcodes
     */
    async getItemWithBarcodesSmapiV1GetItemWithBarcodesGetRaw(requestParameters: GetItemWithBarcodesSmapiV1GetItemWithBarcodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.itemId === null || requestParameters.itemId === undefined) {
            throw new runtime.RequiredError('itemId','Required parameter requestParameters.itemId was null or undefined when calling getItemWithBarcodesSmapiV1GetItemWithBarcodesGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.itemId !== undefined) {
            queryParameters['item_id'] = requestParameters.itemId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/smapi/v1/get_item_with_barcodes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Item With Barcodes
     */
    async getItemWithBarcodesSmapiV1GetItemWithBarcodesGet(requestParameters: GetItemWithBarcodesSmapiV1GetItemWithBarcodesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getItemWithBarcodesSmapiV1GetItemWithBarcodesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Pending Topup Transaction
     */
    async getPendingTopupTransactionFapiV1GetPendingTopupTransactionGetRaw(requestParameters: GetPendingTopupTransactionFapiV1GetPendingTopupTransactionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.pendingTopupTransactionId === null || requestParameters.pendingTopupTransactionId === undefined) {
            throw new runtime.RequiredError('pendingTopupTransactionId','Required parameter requestParameters.pendingTopupTransactionId was null or undefined when calling getPendingTopupTransactionFapiV1GetPendingTopupTransactionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pendingTopupTransactionId !== undefined) {
            queryParameters['pending_topup_transaction_id'] = requestParameters.pendingTopupTransactionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fapi/v1/get_pending_topup_transaction`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Pending Topup Transaction
     */
    async getPendingTopupTransactionFapiV1GetPendingTopupTransactionGet(requestParameters: GetPendingTopupTransactionFapiV1GetPendingTopupTransactionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getPendingTopupTransactionFapiV1GetPendingTopupTransactionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Pending Transaction
     */
    async getPendingTransactionFapiV1GetPendingTransactionGetRaw(requestParameters: GetPendingTransactionFapiV1GetPendingTransactionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.pendingTransactionId === null || requestParameters.pendingTransactionId === undefined) {
            throw new runtime.RequiredError('pendingTransactionId','Required parameter requestParameters.pendingTransactionId was null or undefined when calling getPendingTransactionFapiV1GetPendingTransactionGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.pendingTransactionId !== undefined) {
            queryParameters['pending_transaction_id'] = requestParameters.pendingTransactionId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/fapi/v1/get_pending_transaction`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Pending Transaction
     */
    async getPendingTransactionFapiV1GetPendingTransactionGet(requestParameters: GetPendingTransactionFapiV1GetPendingTransactionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getPendingTransactionFapiV1GetPendingTransactionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Shop By Client Id
     */
    async getShopByClientIdCapiV1GetShopByClientIdGetRaw(requestParameters: GetShopByClientIdCapiV1GetShopByClientIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.clientId === null || requestParameters.clientId === undefined) {
            throw new runtime.RequiredError('clientId','Required parameter requestParameters.clientId was null or undefined when calling getShopByClientIdCapiV1GetShopByClientIdGet.');
        }

        const queryParameters: any = {};

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/capi/v1/get_shop_by_client_id`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Shop By Client Id
     */
    async getShopByClientIdCapiV1GetShopByClientIdGet(requestParameters: GetShopByClientIdCapiV1GetShopByClientIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getShopByClientIdCapiV1GetShopByClientIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Inference
     */
    async inferenceImapiV1InferencePostRaw(requestParameters: InferenceImapiV1InferencePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InferenceResult>> {
        if (requestParameters.inferenceRequest === null || requestParameters.inferenceRequest === undefined) {
            throw new runtime.RequiredError('inferenceRequest','Required parameter requestParameters.inferenceRequest was null or undefined when calling inferenceImapiV1InferencePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/imapi/v1/inference`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InferenceRequestToJSON(requestParameters.inferenceRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InferenceResultFromJSON(jsonValue));
    }

    /**
     * Inference
     */
    async inferenceImapiV1InferencePost(requestParameters: InferenceImapiV1InferencePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InferenceResult> {
        const response = await this.inferenceImapiV1InferencePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Jwt Checker
     */
    async jwtCheckerJtGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/jt`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Jwt Checker
     */
    async jwtCheckerJtGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.jwtCheckerJtGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login
     */
    async loginCapiV1LoginPostRaw(requestParameters: LoginCapiV1LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.username === null || requestParameters.username === undefined) {
            throw new runtime.RequiredError('username','Required parameter requestParameters.username was null or undefined when calling loginCapiV1LoginPost.');
        }

        if (requestParameters.password === null || requestParameters.password === undefined) {
            throw new runtime.RequiredError('password','Required parameter requestParameters.password was null or undefined when calling loginCapiV1LoginPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'application/x-www-form-urlencoded' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.grantType !== undefined) {
            formParams.append('grant_type', requestParameters.grantType as any);
        }

        if (requestParameters.username !== undefined) {
            formParams.append('username', requestParameters.username as any);
        }

        if (requestParameters.password !== undefined) {
            formParams.append('password', requestParameters.password as any);
        }

        if (requestParameters.scope !== undefined) {
            formParams.append('scope', requestParameters.scope as any);
        }

        if (requestParameters.clientId !== undefined) {
            formParams.append('client_id', requestParameters.clientId as any);
        }

        if (requestParameters.clientSecret !== undefined) {
            formParams.append('client_secret', requestParameters.clientSecret as any);
        }

        const response = await this.request({
            path: `/capi/v1/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login
     */
    async loginCapiV1LoginPost(requestParameters: LoginCapiV1LoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginCapiV1LoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Login With Face
     */
    async loginWithFaceCapiV1LoginWithFacePostRaw(requestParameters: LoginWithFaceCapiV1LoginWithFacePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.sendFileRequest === null || requestParameters.sendFileRequest === undefined) {
            throw new runtime.RequiredError('sendFileRequest','Required parameter requestParameters.sendFileRequest was null or undefined when calling loginWithFaceCapiV1LoginWithFacePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/capi/v1/login_with_face`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendFileRequestToJSON(requestParameters.sendFileRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Login With Face
     */
    async loginWithFaceCapiV1LoginWithFacePost(requestParameters: LoginWithFaceCapiV1LoginWithFacePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.loginWithFaceCapiV1LoginWithFacePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Payment Confirm
     */
    async paymentConfirmFapiV1PaymentConfirmPostRaw(requestParameters: PaymentConfirmFapiV1PaymentConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.pendingTransactionRequest === null || requestParameters.pendingTransactionRequest === undefined) {
            throw new runtime.RequiredError('pendingTransactionRequest','Required parameter requestParameters.pendingTransactionRequest was null or undefined when calling paymentConfirmFapiV1PaymentConfirmPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/payment_confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PendingTransactionRequestToJSON(requestParameters.pendingTransactionRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Payment Confirm
     */
    async paymentConfirmFapiV1PaymentConfirmPost(requestParameters: PaymentConfirmFapiV1PaymentConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.paymentConfirmFapiV1PaymentConfirmPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Predict
     */
    async predictImapiV1PredictPostRaw(requestParameters: PredictImapiV1PredictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DetectionResult>> {
        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling predictImapiV1PredictPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/imapi/v1/predict`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DetectionResultFromJSON(jsonValue));
    }

    /**
     * Predict
     */
    async predictImapiV1PredictPost(requestParameters: PredictImapiV1PredictPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DetectionResult> {
        const response = await this.predictImapiV1PredictPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Root
     */
    async rootGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Root
     */
    async rootGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.rootGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Shop Deduct
     */
    async shopDeductFapiV1ShopDeductPutRaw(requestParameters: ShopDeductFapiV1ShopDeductPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.deductDepositRequest === null || requestParameters.deductDepositRequest === undefined) {
            throw new runtime.RequiredError('deductDepositRequest','Required parameter requestParameters.deductDepositRequest was null or undefined when calling shopDeductFapiV1ShopDeductPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/shop_deduct`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeductDepositRequestToJSON(requestParameters.deductDepositRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Shop Deduct
     */
    async shopDeductFapiV1ShopDeductPut(requestParameters: ShopDeductFapiV1ShopDeductPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.shopDeductFapiV1ShopDeductPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Shop Deposit
     */
    async shopDepositFapiV1ShopDepositPutRaw(requestParameters: ShopDepositFapiV1ShopDepositPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.deductDepositRequest === null || requestParameters.deductDepositRequest === undefined) {
            throw new runtime.RequiredError('deductDepositRequest','Required parameter requestParameters.deductDepositRequest was null or undefined when calling shopDepositFapiV1ShopDepositPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/shop_deposit`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DeductDepositRequestToJSON(requestParameters.deductDepositRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Shop Deposit
     */
    async shopDepositFapiV1ShopDepositPut(requestParameters: ShopDepositFapiV1ShopDepositPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.shopDepositFapiV1ShopDepositPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Signup
     */
    async signupCapiV1SignupPostRaw(requestParameters: SignupCapiV1SignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.signUpRequest === null || requestParameters.signUpRequest === undefined) {
            throw new runtime.RequiredError('signUpRequest','Required parameter requestParameters.signUpRequest was null or undefined when calling signupCapiV1SignupPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/capi/v1/signup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpRequestToJSON(requestParameters.signUpRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Signup
     */
    async signupCapiV1SignupPost(requestParameters: SignupCapiV1SignupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.signupCapiV1SignupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Signup With Shop
     */
    async signupWithShopCapiV1SignupWithShopPostRaw(requestParameters: SignupWithShopCapiV1SignupWithShopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.signUpWithShopRequest === null || requestParameters.signUpWithShopRequest === undefined) {
            throw new runtime.RequiredError('signUpWithShopRequest','Required parameter requestParameters.signUpWithShopRequest was null or undefined when calling signupWithShopCapiV1SignupWithShopPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/capi/v1/signup_with_shop`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SignUpWithShopRequestToJSON(requestParameters.signUpWithShopRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Signup With Shop
     */
    async signupWithShopCapiV1SignupWithShopPost(requestParameters: SignupWithShopCapiV1SignupWithShopPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.signupWithShopCapiV1SignupWithShopPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Topup Confirm
     */
    async topupConfirmFapiV1TopupConfirmPostRaw(requestParameters: TopupConfirmFapiV1TopupConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.pendingTopupTransactionRequest === null || requestParameters.pendingTopupTransactionRequest === undefined) {
            throw new runtime.RequiredError('pendingTopupTransactionRequest','Required parameter requestParameters.pendingTopupTransactionRequest was null or undefined when calling topupConfirmFapiV1TopupConfirmPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/topup_confirm`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PendingTopupTransactionRequestToJSON(requestParameters.pendingTopupTransactionRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Topup Confirm
     */
    async topupConfirmFapiV1TopupConfirmPost(requestParameters: TopupConfirmFapiV1TopupConfirmPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.topupConfirmFapiV1TopupConfirmPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Topup
     */
    async topupFapiV1TopupPostRaw(requestParameters: TopupFapiV1TopupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.transactionTopupRequest === null || requestParameters.transactionTopupRequest === undefined) {
            throw new runtime.RequiredError('transactionTopupRequest','Required parameter requestParameters.transactionTopupRequest was null or undefined when calling topupFapiV1TopupPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/fapi/v1/topup`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TransactionTopupRequestToJSON(requestParameters.transactionTopupRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Topup
     */
    async topupFapiV1TopupPost(requestParameters: TopupFapiV1TopupPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.topupFapiV1TopupPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
